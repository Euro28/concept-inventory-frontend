[{"/home/euro/Documents/concept-inventory-frontend/src/index.js":"1","/home/euro/Documents/concept-inventory-frontend/src/App.js":"2","/home/euro/Documents/concept-inventory-frontend/src/Login/login.jsx":"3","/home/euro/Documents/concept-inventory-frontend/src/Login/register.jsx":"4","/home/euro/Documents/concept-inventory-frontend/src/Dashboard/dashboard.jsx":"5","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newQuestion.jsx":"6","/home/euro/Documents/concept-inventory-frontend/src/Quiz/results.jsx":"7","/home/euro/Documents/concept-inventory-frontend/src/Quiz/quiz.jsx":"8","/home/euro/Documents/concept-inventory-frontend/src/Login/loginToolbar.jsx":"9","/home/euro/Documents/concept-inventory-frontend/src/Dashboard/dashboardToolbar.jsx":"10","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newAnswer.jsx":"11","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newQuestionComponents.js":"12","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/enteredAnswers.jsx":"13","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/currentQuestions.jsx":"14"},{"size":661,"mtime":1610658721517,"results":"15","hashOfConfig":"16"},{"size":850,"mtime":1610658721513,"results":"17","hashOfConfig":"16"},{"size":2357,"mtime":1610790203528,"results":"18","hashOfConfig":"16"},{"size":1803,"mtime":1610658721513,"results":"19","hashOfConfig":"16"},{"size":1567,"mtime":1610658721513,"results":"20","hashOfConfig":"16"},{"size":5565,"mtime":1610882577305,"results":"21","hashOfConfig":"16"},{"size":872,"mtime":1610658721513,"results":"22","hashOfConfig":"16"},{"size":1424,"mtime":1610882577309,"results":"23","hashOfConfig":"16"},{"size":403,"mtime":1610658721513,"results":"24","hashOfConfig":"16"},{"size":444,"mtime":1610658721513,"results":"25","hashOfConfig":"16"},{"size":1558,"mtime":1610882577305,"results":"26","hashOfConfig":"16"},{"size":2905,"mtime":1610882577305,"results":"27","hashOfConfig":"16"},{"size":448,"mtime":1610760364904,"results":"28","hashOfConfig":"16"},{"size":834,"mtime":1610882577305,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1vwlrz7",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"/home/euro/Documents/concept-inventory-frontend/src/index.js",[],["62","63"],"/home/euro/Documents/concept-inventory-frontend/src/App.js",[],"/home/euro/Documents/concept-inventory-frontend/src/Login/login.jsx",["64","65"],"/home/euro/Documents/concept-inventory-frontend/src/Login/register.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Dashboard/dashboard.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newQuestion.jsx",["66"],"import React, { useState, useEffect } from \"react\";\nimport {\n  BUTTON,\n  MYFORM,\n  CONTAINER,\n  QuestionInput,\n  NewConcept,\n} from \"./newQuestionComponents.js\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nimport NewAnswer from \"./newAnswer.jsx\";\nimport EnteredAnswers from \"./enteredAnswers.jsx\";\nimport CurrentQuestions from \"./currentQuestions.jsx\";\n//the form you have two initial fields,\n//first is the question name\n//the second is a button which says add a new answer\n//\n//if the user types in misconception field the correct checkbox should be disabled\n//if the user ticks the correct checkbox the misconception field should be cleared and\n//disabled\n\nconst NewQuestion = () => {\n  const [answers, setAnswers] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [misconception, setMisconception] = useState(\"\");\n  const [newConcept, setNewConcept] = useState(false);\n  const [concepts, setConcepts] = useState([]);\n  const [newAnswer, setNewAnswer] = useState(false);\n  const [questions, setQuestions] = useState(null);\n  const [success, setSuccess] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const addAnswer = (ans) => {\n    setNewAnswer(false);\n\n    const ansCopy = [...answers];\n    ansCopy.push(ans);\n\n    setAnswers(ansCopy);\n  };\n\n  useEffect(() => {\n    const getQuiz = async () => {\n      try {\n        const quizQuestions = await axios.get(\"/api/questions\");\n        const questions = quizQuestions.data[0].pages[0].elements;\n        setQuestions(questions);\n\n        const concepts = await axios.get(\"/api/concepts\");\n        setConcepts(concepts.data);\n      } catch (err) {\n        setError(\"Could not retrieve quiz information\");\n        setTimeout(() => {\n          setError(\"\");\n        }, 2000);\n      }\n    };\n    getQuiz();\n  }, []);\n\n  const removeQuestion = async (title) => {\n    const newQuestions = questions.filter((ques) => ques.title !== title);\n    setQuestions(newQuestions);\n\n    try {\n      await axios.patch(\"/api/questions/remove\", {\n        quizTitle: \"Propositional Logic\",\n        title,\n      });\n    } catch (err) {\n      setError(\"could not remove question with title : \", title);\n      setTimeout(() => {\n        setError(\"\");\n      }, 2000);\n    }\n    //make request to remove it\n  };\n\n  const addQuestion = async (question) => {\n    const questionsCopy = [...questions];\n    questionsCopy.push(question);\n    setQuestions(questionsCopy);\n\n    try {\n      await axios.patch(\"/api/questions\", {\n        question,\n        title: \"Propositional Logic\",\n      });\n\n      setAnswers([]);\n      setTitle(\"\");\n      setMisconception(\"Choose...\");\n      setSuccess(\"Question\");\n      setTimeout(() => {\n        setSuccess(\"\");\n      }, 2000);\n    } catch (err) {\n      setError(\"Could not add question, have you added a misconception?\");\n      setTimeout(() => {\n        setError(\"\");\n      }, 2000);\n    }\n  };\n\n  const addConcept = async (concept) => {\n    const conceptsCopy = [...concepts];\n    conceptsCopy.push(concept);\n    setConcepts(conceptsCopy);\n    try {\n      const newConcepts = await axios.patch(\"/api/concepts\", { concept });\n    } catch (err) {\n      setError(\n        \"Could not add new concept, it already exists, or you have not added an explanation\"\n      );\n      setTimeout(() => {\n        setError(\"\");\n      }, 2000);\n    }\n  };\n\n  return (\n    <>\n      <CONTAINER>\n        <MYFORM className=\"mx-auto\">\n          <QuestionInput\n            setTitle={setTitle}\n            setMisconception={setMisconception}\n            title={title}\n            misconception={misconception}\n            concepts={concepts}\n          />\n          <BUTTON\n            onClick={() => setNewConcept(!newConcept)}\n            disabled={newAnswer}\n          >\n            Add Concept\n          </BUTTON>\n          <BUTTON\n            onClick={() => setNewAnswer(!newAnswer)}\n            style={{ marginLeft: \"30px\" }}\n            disabled={newConcept}\n          >\n            Add an answer\n          </BUTTON>\n          {!(newAnswer || newConcept) && (\n            <BUTTON\n              style={{ marginLeft: \"30px\" }}\n              onClick={() =>\n                addQuestion({\n                  correctAnswer: answers\n                    .filter((ans) => ans.correct)\n                    .map((ans) => ans.value),\n                  type: \"checkbox\",\n                  name: `question ${questions.length + 100}`,\n                  title,\n                  valueName: `${misconception}-${Math.floor(\n                    Math.random() * Math.floor(10000)\n                  )}`,\n                  misconception: misconception,\n                  choices: answers.map(({ text, value }) => ({ text, value })),\n                  isRequired: true,\n                })\n              }\n            >\n              Save Question\n            </BUTTON>\n          )}\n          <Button\n            onClick={() => console.log(\"patching quiz\")}\n            style={{ marginLeft: \"225px\" }}\n            variant=\"success\"\n          >\n            Apply Changes\n          </Button>\n        </MYFORM>\n        {success && (\n          <Alert variant=\"success\"> Successfully added {success}</Alert>\n        )}\n        {error && <Alert variant=\"danger\"> {error} </Alert>}\n        {newAnswer && <NewAnswer addAnswer={addAnswer} />}\n        {newConcept && <NewConcept addConcept={addConcept} />}\n        <EnteredAnswers answers={answers} />\n      </CONTAINER>\n      <CurrentQuestions questions={questions} removeQuestion={removeQuestion} />\n    </>\n  );\n};\n\nexport default NewQuestion;\n","/home/euro/Documents/concept-inventory-frontend/src/Quiz/results.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/quiz.jsx",["67"],"/home/euro/Documents/concept-inventory-frontend/src/Login/loginToolbar.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Dashboard/dashboardToolbar.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newAnswer.jsx",["68"],"import React, { useState } from \"react\";\nimport { BUTTON, MYFORM, CONTAINER } from \"./newQuestionComponents.js\";\nimport { Form, Button } from \"react-bootstrap\";\n\n//the form for adding a new answer should have 3 fields\n//the first field is display answer\n//the second field should be a dropdown of concepts, if the concepts\n//they are looking for is not found they should be able to add a custom one that is saved\n//the third field is a checkbox stating the answer is correct\n\nconst NewAnswer = (props) => {\n  const [title, setTitle] = useState(\"\");\n  const [misconception, setMisconception] = useState(\"\");\n  const [correct, setCorrect] = useState(false);\n\n  return (\n    <CONTAINER>\n      <MYFORM\n        className=\"mx-auto\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          props.addAnswer({ text: title, value: misconception, correct });\n        }}\n      >\n        <Form.Group controlId=\"answerTitle\">\n          <Form.Label> Answer :</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"answer\"\n            onChange={(e) => setTitle(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"answerConcepts\">\n          <Form.Label> Misconception: </Form.Label>\n          <Form.Control\n            as=\"select\"\n            defaultValue=\"Choose...\"\n            onChange={(e) => setMisconception(e.target.value)}\n          >\n            <option>Choose...</option>\n            <option>Conjunction</option>\n          </Form.Control>\n        </Form.Group>\n        <Form.Group id=\"correctCheckbox\">\n          <Form.Check\n            type=\"checkbox\"\n            label=\"Correct Answer?\"\n            onChange={(e) => setCorrect(e.target.checked)}\n          />\n        </Form.Group>\n        <BUTTON type=\"submit\"> Submit </BUTTON>\n      </MYFORM>\n    </CONTAINER>\n  );\n};\n\nexport default NewAnswer;\n","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newQuestionComponents.js",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/enteredAnswers.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/currentQuestions.jsx",["69","70","71"],"import React from \"react\";\n\nimport { ListGroup, Button } from \"react-bootstrap\";\n\nconst CurrentQuestions = (props) => {\n  return (\n    <div>\n      <ListGroup>\n        {props.questions &&\n          props.questions\n            .filter(\n              (ques) => ques.type === \"checkbox\" || ques.type === \"radiogroup\"\n            )\n            .map((ques) => (\n              <ListGroup.Item key={ques.title}>\n                <div style={{ \"maxWidth\": \"700px\" }}>{ques.title}</div>\n                <Button\n                  style={{ float: \"right\" }}\n                  variant=\"danger\"\n                  onClick={() => props.removeQuestion(ques.title)}\n                >\n                  Delete\n                </Button>\n              </ListGroup.Item>\n            ))}\n      </ListGroup>\n    </div>\n  );\n};\n\nexport default CurrentQuestions;\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":11,"column":8,"nodeType":"78","messageId":"79","endLine":11,"endColumn":16},{"ruleId":"80","severity":1,"message":"81","line":32,"column":6,"nodeType":"82","endLine":32,"endColumn":8,"suggestions":"83"},{"ruleId":"76","severity":1,"message":"84","line":20,"column":10,"nodeType":"78","messageId":"79","endLine":20,"endColumn":23},{"ruleId":"76","severity":1,"message":"85","line":7,"column":10,"nodeType":"78","messageId":"79","endLine":7,"endColumn":15},{"ruleId":"76","severity":1,"message":"86","line":3,"column":16,"nodeType":"78","messageId":"79","endLine":3,"endColumn":22},{"ruleId":"76","severity":1,"message":"87","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":19},{"ruleId":"76","severity":1,"message":"86","line":3,"column":21,"nodeType":"78","messageId":"79","endLine":3,"endColumn":27},{"ruleId":"80","severity":1,"message":"88","line":14,"column":6,"nodeType":"82","endLine":14,"endColumn":22,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'Register' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'logIn'. Either include it or remove the dependency array.","ArrayExpression",["92"],"'misconception' is assigned a value but never used.","'error' is assigned a value but never used.","'Button' is defined but never used.","'ListGroup' is defined but never used.","React Hook useEffect has a missing dependency: 'props.questions'. Either include it or remove the dependency array.",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [logIn]",{"range":"98","text":"99"},"Update the dependencies array to be: [props.question, props.questions]",{"range":"100","text":"101"},[850,852],"[logIn]",[337,353],"[props.question, props.questions]"]