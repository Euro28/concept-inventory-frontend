[{"/home/euro/Documents/concept-inventory-frontend/src/index.js":"1","/home/euro/Documents/concept-inventory-frontend/src/App.js":"2","/home/euro/Documents/concept-inventory-frontend/src/Login/login.jsx":"3","/home/euro/Documents/concept-inventory-frontend/src/Login/register.jsx":"4","/home/euro/Documents/concept-inventory-frontend/src/Dashboard/dashboard.jsx":"5","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newQuestion.jsx":"6","/home/euro/Documents/concept-inventory-frontend/src/Quiz/results.jsx":"7","/home/euro/Documents/concept-inventory-frontend/src/Quiz/quiz.jsx":"8","/home/euro/Documents/concept-inventory-frontend/src/Login/loginToolbar.jsx":"9","/home/euro/Documents/concept-inventory-frontend/src/Dashboard/dashboardToolbar.jsx":"10","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newAnswer.jsx":"11","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newQuestionComponents.js":"12","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/enteredAnswers.jsx":"13","/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/currentQuestions.jsx":"14","/home/euro/Documents/concept-inventory-frontend/src/Quiz/Spinner.jsx":"15","/home/euro/Documents/concept-inventory-frontend/src/Quiz/ConceptResult.jsx":"16"},{"size":661,"mtime":1610731585671,"results":"17","hashOfConfig":"18"},{"size":850,"mtime":1610731585671,"results":"19","hashOfConfig":"18"},{"size":2321,"mtime":1610953771932,"results":"20","hashOfConfig":"18"},{"size":1803,"mtime":1610731585671,"results":"21","hashOfConfig":"18"},{"size":1601,"mtime":1611242299919,"results":"22","hashOfConfig":"18"},{"size":5226,"mtime":1611252089990,"results":"23","hashOfConfig":"18"},{"size":1293,"mtime":1611059101501,"results":"24","hashOfConfig":"18"},{"size":1363,"mtime":1611066380031,"results":"25","hashOfConfig":"18"},{"size":403,"mtime":1610731585671,"results":"26","hashOfConfig":"18"},{"size":857,"mtime":1611058043283,"results":"27","hashOfConfig":"18"},{"size":1558,"mtime":1610788907057,"results":"28","hashOfConfig":"18"},{"size":2902,"mtime":1611048212317,"results":"29","hashOfConfig":"18"},{"size":448,"mtime":1610750470042,"results":"30","hashOfConfig":"18"},{"size":834,"mtime":1610763257264,"results":"31","hashOfConfig":"18"},{"size":447,"mtime":1610942509898,"results":"32","hashOfConfig":"18"},{"size":471,"mtime":1610962035050,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1xcdpr6",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/euro/Documents/concept-inventory-frontend/src/index.js",[],["72","73"],"/home/euro/Documents/concept-inventory-frontend/src/App.js",[],"/home/euro/Documents/concept-inventory-frontend/src/Login/login.jsx",["74","75"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Alert from \"react-bootstrap/Alert\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nimport Register from \"./register.jsx\";\nimport LoginToolbar from \"./loginToolbar.jsx\";\n\nconst Login = () => {\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const loggedIn = async () => {\n      try {\n        const user = await axios.post(\"/api/login\");\n        if (user.status === 200) {\n          logIn();\n        }\n      } catch (err) {}\n    };\n\n    loggedIn();\n  }, []);\n\n  const logIn = () => {\n    history.replace({\n      pathname: \"/dashboard\",\n    });\n  };\n\n  const submitName = async (e) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      const user = await axios.post(\"/api/login\", { name });\n      setLoading(false);\n      if (user.status === 200) {\n        Cookies.set(\"name\", name);\n        logIn();\n      } else {\n        setError(true);\n        setName(\"\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <LoginToolbar />\n      <div className=\"Login\">\n        <h1> Login </h1>\n        <Form onSubmit={(e) => submitName(e)}>\n          <Form.Group controlid=\"formname\">\n            <Form.Label> username</Form.Label>\n            <Form.Control\n              type=\"name\"\n              placeholder=\"enter name\"\n              onChange={(e) => setName(e.target.value)}\n            />\n            <Form.Text className=\"text-muted\">register a name first</Form.Text>\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            login\n          </Button>\n        </Form>\n        {loading && (\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\"> Loading... </span>\n          </Spinner>\n        )}\n\n        {error && (\n          <Alert variant={\"danger\"} dismissible onClose={() => setError(false)}>\n            No such user exists\n          </Alert>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Login;\n","/home/euro/Documents/concept-inventory-frontend/src/Login/register.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Dashboard/dashboard.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newQuestion.jsx",["76"],"import React, { useState, useEffect } from \"react\";\nimport {\n  BUTTON,\n  MYFORM,\n  CONTAINER,\n  QuestionInput,\n  NewConcept,\n} from \"./newQuestionComponents.js\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nimport NewAnswer from \"./newAnswer.jsx\";\nimport EnteredAnswers from \"./enteredAnswers.jsx\";\nimport CurrentQuestions from \"./currentQuestions.jsx\";\nimport Toolbar from \"../../Dashboard/dashboardToolbar.jsx\";\n\nconst NewQuestion = () => {\n  const [answers, setAnswers] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [misconception, setMisconception] = useState(\"\");\n  const [newConcept, setNewConcept] = useState(false);\n  const [concepts, setConcepts] = useState([]);\n  const [newAnswer, setNewAnswer] = useState(false);\n  const [questions, setQuestions] = useState(null);\n  const [success, setSuccess] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const addAnswer = (ans) => {\n    setNewAnswer(false);\n\n    const ansCopy = [...answers];\n    ansCopy.push(ans);\n\n    setAnswers(ansCopy);\n  };\n\n  useEffect(() => {\n    const getQuiz = async () => {\n      try {\n        const quizQuestions = await axios.get(\"/api/questions\");\n        const questions = quizQuestions.data[0].pages[0].elements;\n        setQuestions(questions);\n\n        const concepts = await axios.get(\"/api/concepts\");\n        setConcepts(concepts.data);\n      } catch (err) {\n        setError(\"Could not retrieve quiz information\");\n        setTimeout(() => {\n          setError(\"\");\n        }, 2000);\n      }\n    };\n    getQuiz();\n  }, []);\n\n  const removeQuestion = async (title) => {\n    const newQuestions = questions.filter((ques) => ques.title !== title);\n    setQuestions(newQuestions);\n\n    try {\n      await axios.patch(\"/api/questions/remove\", {\n        quizTitle: \"Propositional Logic\",\n        title,\n      });\n    } catch (err) {\n      setError(\"could not remove question with title : \", title);\n      setTimeout(() => {\n        setError(\"\");\n      }, 2000);\n    }\n    //make request to remove it\n  };\n\n  const addQuestion = async (question) => {\n    const questionsCopy = [...questions];\n    questionsCopy.push(question);\n    setQuestions(questionsCopy);\n\n    try {\n      await axios.patch(\"/api/questions\", {\n        question,\n        title: \"Propositional Logic\",\n      });\n\n      setAnswers([]);\n      setTitle(\"\");\n      setMisconception(\"Choose...\");\n      setSuccess(\"Question\");\n      setTimeout(() => {\n        setSuccess(\"\");\n      }, 2000);\n    } catch (err) {\n      setError(\"Could not add question, have you added a misconception?\");\n      setTimeout(() => {\n        setError(\"\");\n      }, 2000);\n    }\n  };\n\n  const addConcept = async (concept) => {\n    setConcepts({ ...concepts, [concept.concept]: concept.explanation });\n\n    try {\n      await axios.patch(\"/api/concepts\", { concept });\n      setNewConcept(false);\n      setSuccess(`Concept '${concept.concept}'`);\n      setTimeout(() => {\n        setSuccess(\"\");\n      }, 2000);\n    } catch (err) {\n      setError(\n        \"Could not add new concept, it already exists, or you have not added an explanation\"\n      );\n      setTimeout(() => {\n        setError(\"\");\n      }, 2000);\n    }\n  };\n\n  return (\n    <>\n      <Toolbar />\n      <CONTAINER>\n        <MYFORM className=\"mx-auto\">\n          <QuestionInput\n            setTitle={setTitle}\n            setMisconception={setMisconception}\n            title={title}\n            misconception={misconception}\n            concepts={concepts}\n          />\n          <BUTTON\n            onClick={() => setNewConcept(!newConcept)}\n            disabled={newAnswer}\n          >\n            Add Concept\n          </BUTTON>\n          <BUTTON\n            onClick={() => setNewAnswer(!newAnswer)}\n            style={{ marginLeft: \"30px\" }}\n            disabled={newConcept}\n          >\n            Add an answer\n          </BUTTON>\n          {!(newAnswer || newConcept) && (\n            <BUTTON\n              style={{ marginLeft: \"370px\" }}\n              onClick={() =>\n                addQuestion({\n                  correctAnswer: answers\n                    .filter((ans) => ans.correct)\n                    .map((ans) => ans.value),\n                  type: \"checkbox\",\n                  name: `question ${questions.length + 100}`,\n                  title,\n                  valueName: `${misconception}-${Math.floor(\n                    Math.random() * Math.floor(10000)\n                  )}`,\n                  misconception: misconception,\n                  choices: answers.map(({ text, value }) => ({ text, value })),\n                  isRequired: true,\n                })\n              }\n            >\n              Save Question\n            </BUTTON>\n          )}\n        </MYFORM>\n        {success && (\n          <Alert variant=\"success\"> Successfully added {success}</Alert>\n        )}\n        {error && <Alert variant=\"danger\"> {error} </Alert>}\n        {newAnswer && <NewAnswer addAnswer={addAnswer} />}\n        {newConcept && <NewConcept addConcept={addConcept} />}\n        <EnteredAnswers answers={answers} />\n      </CONTAINER>\n      <CurrentQuestions questions={questions} removeQuestion={removeQuestion} />\n    </>\n  );\n};\n\nexport default NewQuestion;\n","/home/euro/Documents/concept-inventory-frontend/src/Quiz/results.jsx",["77"],"import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\n\nimport Spinner from \"./Spinner.jsx\";\nimport ConceptResult from \"./ConceptResult.jsx\";\nimport Toolbar from \"../Dashboard/dashboardToolbar.jsx\";\n\nconst Results = () => {\n  const [quizResults, setQuizResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [conceptsExplanations, setConceptExplanations] = useState([]);\n\n  useEffect(() => {\n    const fetchResults = async () => {\n      try {\n        setLoading(true);\n\n        const results = await axios.get(\"/api/results\");\n        const allConcepts = await axios.get(\"/api/concepts\");\n\n        setConceptExplanations(allConcepts.data);\n        setQuizResults(results.data);\n\n        setLoading(false);\n      } catch (err) {\n        setError(err);\n      }\n    };\n\n    fetchResults();\n  }, []);\n\n  const results = (\n    <div>\n      {Object.keys(quizResults).map((concept) => (\n        <ConceptResult\n          key={concept}\n          title={concept}\n          score={quizResults[concept]}\n          explanation={conceptsExplanations[concept]}\n        />\n      ))}\n    </div>\n  );\n\n  return (\n    <>\n      <Toolbar />\n      {loading ? <Spinner /> : results}\n    </>\n  );\n};\n\nexport default Results;\n","/home/euro/Documents/concept-inventory-frontend/src/Quiz/quiz.jsx",["78","79","80","81"],"import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Survey from \"survey-react\";\n\nimport Results from \"./results.jsx\";\n\nconst Quiz = (props) => {\n  const [resultPage, setResultPage] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [questions, setQuestions] = useState({});\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const getQuestions = async () => {\n      try {\n        const questionsAPI = await axios.get(\"/api/questions\");\n        setQuestions(questionsAPI.data[0]);\n      } catch (err) {\n        setError(\"couldnt retrieve questions please contact euro\");\n      }\n    };\n\n    getQuestions();\n  }, []);\n\n  const storeData = async (quizResults) => {\n    try {\n      const results = await axios.post(\"/api/results\", {\n        results: quizResults,\n      });\n\n      await axios.patch(\"/api/takenQuiz\");\n\n      history.replace(\"/dashboard\");\n    } catch (err) {\n      setError(\n        \"couldn't post results of quiz, could you please take it again sorry :(\"\n      );\n    }\n  };\n\n  return (\n    <div>\n      <Survey.Survey\n        showCompletedPage={false}\n        onComplete={(data) => {\n          storeData(data.valuesHash);\n          setResultPage(true);\n        }}\n        json={questions}\n      />\n    </div>\n  );\n};\n\nexport default Quiz;\n","/home/euro/Documents/concept-inventory-frontend/src/Login/loginToolbar.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Dashboard/dashboardToolbar.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newAnswer.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/newQuestionComponents.js",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/enteredAnswers.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/newQuiz/currentQuestions.jsx",[],["82","83"],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/Spinner.jsx",[],"/home/euro/Documents/concept-inventory-frontend/src/Quiz/ConceptResult.jsx",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":11,"column":8,"nodeType":"90","messageId":"91","endLine":11,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":32,"column":6,"nodeType":"94","endLine":32,"endColumn":8,"suggestions":"95"},{"ruleId":"88","severity":1,"message":"96","line":9,"column":10,"nodeType":"90","messageId":"91","endLine":9,"endColumn":16},{"ruleId":"88","severity":1,"message":"97","line":11,"column":10,"nodeType":"90","messageId":"91","endLine":11,"endColumn":15},{"ruleId":"88","severity":1,"message":"98","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":15},{"ruleId":"88","severity":1,"message":"99","line":9,"column":10,"nodeType":"90","messageId":"91","endLine":9,"endColumn":20},{"ruleId":"88","severity":1,"message":"97","line":10,"column":10,"nodeType":"90","messageId":"91","endLine":10,"endColumn":15},{"ruleId":"88","severity":1,"message":"100","line":30,"column":13,"nodeType":"90","messageId":"91","endLine":30,"endColumn":20},{"ruleId":"84","replacedBy":"101"},{"ruleId":"86","replacedBy":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'Register' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'logIn'. Either include it or remove the dependency array.","ArrayExpression",["105"],"'Button' is defined but never used.","'error' is assigned a value but never used.","'Results' is defined but never used.","'resultPage' is assigned a value but never used.","'results' is assigned a value but never used.",["103"],["104"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [logIn]",{"range":"108","text":"109"},[850,852],"[logIn]"]